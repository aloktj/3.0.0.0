set(_TRDP_CONFIG_MODULE_ROOT "${CMAKE_CURRENT_LIST_DIR}/..")

function(trdp_load_make_config config_name)
    if(config_name STREQUAL "")
        return()
    endif()

    if(IS_ABSOLUTE "${config_name}")
        set(_config_path "${config_name}")
    else()
        set(_candidate "${_TRDP_CONFIG_MODULE_ROOT}/config/${config_name}")
        if(EXISTS "${_candidate}")
            set(_config_path "${_candidate}")
        else()
            set(_candidate "${_TRDP_CONFIG_MODULE_ROOT}/${config_name}")
            if(EXISTS "${_candidate}")
                set(_config_path "${_candidate}")
            else()
                message(FATAL_ERROR "TRDP config '${config_name}' not found relative to ${_TRDP_CONFIG_MODULE_ROOT}")
            endif()
        endif()
    endif()

    file(STRINGS "${_config_path}" _raw_lines)

    unset(_cfg_values)
    foreach(_line IN LISTS _raw_lines)
        string(REGEX REPLACE "#.*$" "" _line "${_line}")
        string(STRIP "${_line}" _line)
        if(_line STREQUAL "")
            continue()
        endif()
        if(NOT _line MATCHES "^([A-Za-z0-9_]+)[ \t]*([+]?=)[ \t]*(.*)$")
            continue()
        endif()
        set(_var "${CMAKE_MATCH_1}")
        set(_op "${CMAKE_MATCH_2}")
        set(_value "${CMAKE_MATCH_3}")
        string(STRIP "${_value}" _value)

        set(_var_name "_CFG_${_var}")
        if(_op STREQUAL "=")
            set(${_var_name} "${_value}")
        else()
            if(DEFINED ${_var_name})
                set(${_var_name} "${${_var_name}} ${_value}")
            else()
                set(${_var_name} "${_value}")
            endif()
        endif()
    endforeach()

    set(_arch "${_CFG_ARCH}")
    if(_arch STREQUAL "")
        set(_arch "unknown")
    endif()

    set(_target_os "${_CFG_TARGET_OS}")
    if(_target_os STREQUAL "")
        set(_target_os "LINUX")
    endif()

    set(_target_vos "${_CFG_TARGET_VOS}")
    if(_target_vos STREQUAL "")
        set(_target_vos "posix")
    endif()

    foreach(_flag_var IN ITEMS CFLAGS INCPATH VOS_PATH VOS_INCPATH LDFLAGS ADD_INC ADD_SRC)
        if(NOT DEFINED _CFG_${_flag_var})
            set(_CFG_${_flag_var} "")
        endif()
    endforeach()

    set(_expand_keys ARCH TARGET_OS TARGET_VOS TARGET_FLAG TCPREFIX TCPOSTFIX)
    foreach(_value_var IN ITEMS CFLAGS INCPATH VOS_PATH VOS_INCPATH LDFLAGS)
        set(_expanded_value "${_CFG_${_value_var}}")
        foreach(_key IN LISTS _expand_keys)
            if(DEFINED _CFG_${_key} AND NOT _CFG_${_key} STREQUAL "")
                set(_needle "$(${_key})")
                string(REPLACE "${_needle}" "${_CFG_${_key}}" _expanded_value "${_expanded_value}")
            endif()
        endforeach()
        set(_CFG_${_value_var} "${_expanded_value}")
    endforeach()

    set(_tool_path "${_CFG_TCPATH}")
    string(STRIP "${_tool_path}" _tool_path)
    if(_tool_path MATCHES "[^/]$")
        set(_tool_path "${_tool_path}/")
    endif()

    set(_tcprefix "${_CFG_TCPREFIX}")
    set(_tcpostfix "${_CFG_TCPOSTFIX}")

    set(_compiler_basename "gcc")
    if(_target_os STREQUAL "VXWORKS")
        set(_compiler_basename "cc")
    elseif(_target_os STREQUAL "INTEGRITY")
        set(_compiler_basename "cc")
    endif()

    set(_ar_basename "ar")
    set(_ranlib_basename "ranlib")

    if(_target_os STREQUAL "VXWORKS")
        set(_compiler_path "${_tool_path}${_compiler_basename}${_tcpostfix}")
        set(_ar_path "${_tool_path}${_ar_basename}${_tcpostfix}")
        set(_ranlib_path "${_tool_path}RANLIB${_tcpostfix}")
    else()
        set(_compiler_path "${_tool_path}${_tcprefix}${_compiler_basename}${_tcpostfix}")
        set(_ar_path "${_tool_path}${_tcprefix}${_ar_basename}${_tcpostfix}")
        set(_ranlib_path "${_tool_path}${_tcprefix}${_ranlib_basename}${_tcpostfix}")
    endif()

    # Prepare flag lists
    set(_raw_cflags "${_CFG_CFLAGS}")
    set(_raw_includes "${_CFG_INCPATH} ${_CFG_VOS_PATH} ${_CFG_VOS_INCPATH}")
    set(_raw_ldflags "${_CFG_LDFLAGS}")

    separate_arguments(_cflags UNIX_COMMAND "${_raw_cflags}")
    separate_arguments(_include_flags UNIX_COMMAND "${_raw_includes}")
    separate_arguments(_ldflags UNIX_COMMAND "${_raw_ldflags}")

    set(_include_dirs "")
    set(_compile_definitions "")
    set(_compile_options "")
    set(_link_libraries "")
    set(_link_directories "")
    set(_link_options "")
    set(_pthread_needed FALSE)

    foreach(_flag IN LISTS _include_flags)
        if(_flag MATCHES "^-I(.+)$")
            list(APPEND _include_dirs "${CMAKE_MATCH_1}")
        endif()
    endforeach()

    foreach(_flag IN LISTS _cflags)
        if(_flag MATCHES "^-I(.+)$")
            list(APPEND _include_dirs "${CMAKE_MATCH_1}")
        elseif(_flag MATCHES "^-D(.+)$")
            list(APPEND _compile_definitions "${CMAKE_MATCH_1}")
        elseif(_flag STREQUAL "-pthread")
            set(_pthread_needed TRUE)
            list(APPEND _compile_options "${_flag}")
        elseif(_flag MATCHES "^-L(.+)$")
            list(APPEND _link_directories "${CMAKE_MATCH_1}")
        elseif(_flag MATCHES "^-l(.+)$")
            list(APPEND _link_libraries "${CMAKE_MATCH_1}")
        elseif(_flag MATCHES "^-Wl,(.+)$")
            list(APPEND _link_options "-Wl,${CMAKE_MATCH_1}")
        elseif(NOT _flag STREQUAL "")
            list(APPEND _compile_options "${_flag}")
        endif()
    endforeach()

    foreach(_flag IN LISTS _ldflags)
        if(_flag MATCHES "^-L(.+)$")
            list(APPEND _link_directories "${CMAKE_MATCH_1}")
        elseif(_flag MATCHES "^-l(.+)$")
            list(APPEND _link_libraries "${CMAKE_MATCH_1}")
        elseif(_flag MATCHES "^-Wl,(.+)$")
            list(APPEND _link_options "-Wl,${CMAKE_MATCH_1}")
        elseif(_flag STREQUAL "-pthread")
            set(_pthread_needed TRUE)
            list(APPEND _link_options "${_flag}")
        elseif(NOT _flag STREQUAL "")
            list(APPEND _link_options "${_flag}")
        endif()
    endforeach()

    if(_pthread_needed)
        list(APPEND _link_options "-pthread")
    endif()

    # remove duplicates
    list(REMOVE_DUPLICATES _include_dirs)
    list(REMOVE_DUPLICATES _compile_definitions)
    list(REMOVE_DUPLICATES _compile_options)
    list(REMOVE_DUPLICATES _link_libraries)
    list(REMOVE_DUPLICATES _link_directories)
    list(REMOVE_DUPLICATES _link_options)

    # Determine system name hint
    set(_system_name_hint "")
    string(TOLOWER "${_arch}" _arch_lower)
    if(_target_os STREQUAL "VXWORKS")
        set(_system_name_hint "VxWorks")
    elseif(_target_os STREQUAL "LINUX" OR _target_os STREQUAL "POSIX")
        if(_arch_lower MATCHES "osx" OR _arch_lower MATCHES "darwin")
            set(_system_name_hint "Darwin")
        elseif(_arch_lower MATCHES "qnx")
            set(_system_name_hint "QNX")
        else()
            set(_system_name_hint "Linux")
        endif()
    elseif(_target_os STREQUAL "QNX")
        set(_system_name_hint "QNX")
    elseif(_target_os STREQUAL "OSX")
        set(_system_name_hint "Darwin")
    endif()

    # Feature switches
    set(_md_support "${_CFG_MD_SUPPORT}")
    set(_pd_unicast "${_CFG_PD_UNICAST_SUPPORT}")
    set(_tsn_support "${_CFG_TSN_SUPPORT}")
    set(_soa_support "${_CFG_SOA_SUPPORT}")
    set(_hp_support "${_CFG_HIGH_PERF_INDEXED}")
    set(_hp_base2 "${_CFG_HIGH_PERF_BASE2}")
    set(_rt_threads "${_CFG_RT_THREADS}")
    set(_target_flag "${_CFG_TARGET_FLAG}")

    # Cross compilation detection
    set(_is_cross FALSE)
    if(NOT _tcprefix STREQUAL "" OR NOT _tcpostfix STREQUAL "")
        set(_is_cross TRUE)
    endif()
    if(_target_os STREQUAL "VXWORKS" OR _arch_lower MATCHES "sama" OR _arch_lower MATCHES "imx" OR _arch_lower MATCHES "raspi" OR _arch_lower MATCHES "vxworks")
        set(_is_cross TRUE)
    endif()

    set(TRDP_CONFIG_PATH "${_config_path}" PARENT_SCOPE)
    set(TRDP_CONFIG_ARCH "${_arch}" PARENT_SCOPE)
    set(TRDP_CONFIG_TARGET_OS "${_target_os}" PARENT_SCOPE)
    set(TRDP_CONFIG_TARGET_VOS "${_target_vos}" PARENT_SCOPE)
    set(TRDP_CONFIG_TCPATH "${_tool_path}" PARENT_SCOPE)
    set(TRDP_CONFIG_TCPREFIX "${_tcprefix}" PARENT_SCOPE)
    set(TRDP_CONFIG_TCPOSTFIX "${_tcpostfix}" PARENT_SCOPE)
    set(TRDP_CONFIG_COMPILER "${_compiler_path}" PARENT_SCOPE)
    set(TRDP_CONFIG_AR "${_ar_path}" PARENT_SCOPE)
    set(TRDP_CONFIG_RANLIB "${_ranlib_path}" PARENT_SCOPE)
    set(TRDP_CONFIG_COMPILE_OPTIONS "${_compile_options}" PARENT_SCOPE)
    set(TRDP_CONFIG_COMPILE_DEFINITIONS "${_compile_definitions}" PARENT_SCOPE)
    set(TRDP_CONFIG_INCLUDE_DIRS "${_include_dirs}" PARENT_SCOPE)
    set(TRDP_CONFIG_LINK_LIBRARIES "${_link_libraries}" PARENT_SCOPE)
    set(TRDP_CONFIG_LINK_DIRECTORIES "${_link_directories}" PARENT_SCOPE)
    set(TRDP_CONFIG_LINK_OPTIONS "${_link_options}" PARENT_SCOPE)
    set(TRDP_CONFIG_MD_SUPPORT "${_md_support}" PARENT_SCOPE)
    set(TRDP_CONFIG_PD_UNICAST_SUPPORT "${_pd_unicast}" PARENT_SCOPE)
    set(TRDP_CONFIG_TSN_SUPPORT "${_tsn_support}" PARENT_SCOPE)
    set(TRDP_CONFIG_SOA_SUPPORT "${_soa_support}" PARENT_SCOPE)
    set(TRDP_CONFIG_HIGH_PERF_SUPPORT "${_hp_support}" PARENT_SCOPE)
    set(TRDP_CONFIG_HIGH_PERF_BASE2 "${_hp_base2}" PARENT_SCOPE)
    set(TRDP_CONFIG_RT_THREADS "${_rt_threads}" PARENT_SCOPE)
    set(TRDP_CONFIG_TARGET_FLAG "${_target_flag}" PARENT_SCOPE)
    set(TRDP_CONFIG_SYSTEM_NAME_HINT "${_system_name_hint}" PARENT_SCOPE)
    set(TRDP_CONFIG_IS_CROSS "${_is_cross}" PARENT_SCOPE)
    set(TRDP_CONFIG_LOADED TRUE PARENT_SCOPE)
endfunction()
